"""Rename user_table to user and update ForeignKeys

Revision ID: rename_user_table_to_user
Revises: previous_revision_id
Create Date: YYYY-MM-DD HH:MM:SS.ffffff

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'rename_user_table_to_user'
down_revision = 'previous_revision_id'
branch_labels = None
depends_on = None


def upgrade():
    # Rename 'user_table' to 'user'
    op.rename_table('user_table', 'user')

    # ### Commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('message') as batch_op:
        # Drop the existing ForeignKey constraint
        batch_op.drop_constraint('message_user_id_fkey', type_='foreignkey')  # Adjust the constraint name if different

        # Create a new ForeignKey constraint pointing to 'user.id'
        batch_op.create_foreign_key(
            'message_user_id_fkey', 'user', ['user_id'], ['id']
        )
    # ### end Alembic commands ###


def downgrade():
    # Rename 'user' back to 'user_table'
    op.rename_table('user', 'user_table')

    # ### Commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('message') as batch_op:
        # Drop the updated ForeignKey constraint
        batch_op.drop_constraint('message_user_id_fkey', type_='foreignkey')

        # Recreate the original ForeignKey constraint pointing back to 'user_table.id'
        batch_op.create_foreign_key(
            'message_user_id_fkey', 'user_table', ['user_id'], ['id']
        )
    # ### end Alembic commands ###
